url: https://ddimmery.github.io/tidyhte/
template:
  params:
    ganalytics: G-R58XC167ZD
    bootswatch: yeti
navbar:
  structure:
    left:  [home, reference, articles, news]
    right: [github]
  components:
    home: ~
    articles:
      text: Vignettes
      menu:
      - text: Methodological details
        href: articles/methodological_details.html
      - text: Example experimental analysis
        href: articles/experimental_analysis.html
      - text: Example observational analysis
        href: articles/observational_analysis.html
reference:
- title: Estimation API
  desc: >
    Tidy functions for performing an analysis of heterogeneous treatment effects. Once
    a configuration has been defined (like by the Recipe API), these functions are the
    workhorses that perform all estimation.
- contents:
  - attach_config
  - make_splits
  - produce_plugin_estimates
  - construct_pseudo_outcomes
  - estimate_QoI
- title: Recipe API
  desc: >
    Tidy functions for configuring a "recipe" for how to estimate heterogeneous treatment effects.
    This is the easiest way to get started with setting up a configuration for an HTE analysis.
- contents:
  - basic_config
  - add_propensity_score_model
  - add_known_propensity_score
  - add_propensity_diagnostic
  - add_outcome_model
  - add_outcome_diagnostic
  - add_effect_model
  - add_effect_diagnostic
  - add_moderator
  - add_vimp
  - remove_vimp
- title: Model Configuration
  desc: >
    Classes to define the configuration of models to be used in the eventual HTE analysis.
    These are the classes which define the underlying configurations in the Recipe API. They're
    most useful for advanced users who want the most granular control over their analysis, but
    most users will be best served by the Recipe API.
- subtitle: Base Class
- contents:
  - Model_cfg
- subtitle: Models for displaying results
  desc: >
    These model configurations include valid standard errors and are well suited
    for providing usable output to be plotted or returned for formal inference.
- contents:
  - Stratified_cfg
  - KernelSmooth_cfg
- subtitle: Models for nuisance functions
  desc: >
    These models are most useful for estimating nuisance functions in the course of HTE
    estimation. In particular, `Known_cfg` may be used when the propensity score is
    known ex ante, while `SLEnsemble_cfg` may be used when a SuperLearner ensemble
    of machine learning models should be used to estimate an unknown nuisance function.
- contents:
  - Known_cfg
  - Constant_cfg
  - SLEnsemble_cfg
  - SLLearner_cfg
- title: Analysis Configuration
  desc: >
    These classes configure the overall shape of the HTE analysis: essentially, how
    all the various components and models should fit together. They explain what models
    should be estimated and how those models should be combined into relevant quantities
    of interest. These, too, underlie the Recipe API, and should rarely need to be used
    directly.
- contents:
  - Diagnostics_cfg
  - HTE_cfg
  - QoI_cfg
  - VIMP_cfg
- subtitle: Configuration of HTE estimands
  desc: >
    There are two configurations for HTE estimands. `MCATE_cfg` simply provides a one-dimensional
    slice of the effects over a particular dimension. It averages over all other moderators, so does not
    attempt to attribute heterogeneity to particular covariates. `PCATE_cfg`, however, does attempt to do
    this type of attribution. Estimation of these "partial" effects requires strong assumptions, even 
    within the context of a randomized control trial. Essentially, one must assume that the moderator, too,
    is random conditional on treatment and other covariates.
- contents:
  - MCATE_cfg
  - PCATE_cfg
- title: Internal Functions
  desc: >
    The remaining functions are not really useful for end-users. Documentation is provided
    in order to provide additional details about the internal workings of the methods.
- contents:
  - SL.glmnet.interaction
  - "predict.SL.glmnet.interaction"
  - calculate_ate
  - calculate_diagnostics
  - calculate_rroc
  - calculate_linear_vimp
  - calculate_vimp
  - split_data
  - Model_data
  - check_data_has_hte_cfg
  - check_identifier
  - check_nuisance_models
  - check_splits
  - check_weights
  - fit_plugin
  - fit_plugin_A
  - fit_plugin_Y
  - fit_effect
  - listwise_deletion
